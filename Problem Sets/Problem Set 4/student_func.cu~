//Udacity HW 4
//Radix Sorting

#include "utils.h"
#include <thrust/host_vector.h>
#include <cuda_runtime.h>
#include <bitset>
#include <iostream>

/* Red Eye Removal
   ===============

   For this assignment we are implementing red eye removal.  This is
   accomplished by first creating a score for every pixel that tells us how
   likely it is to be a red eye pixel.  We have already done this for you - you
   are receiving the scores and need to sort them in ascending order so that we
   know which pixels to alter to remove the red eye.

Note: ascending order == smallest to largest

Each score is associated with a position, when you sort the scores, you must
also move the positions accordingly.

Implementing Parallel Radix Sort with CUDA
==========================================

The basic idea is to construct a histogram on each pass of how many of each
"digit" there are.   Then we scan this histogram so that we know where to put
the output of each digit.  For example, the first 1 must come after all the
0s so we have to know how many 0s there are to be able to start moving 1s
into the correct position.

1) Histogram of the number of occurrences of each digit
2) Exclusive Prefix Sum of Histogram
3) Determine relative offset of each digit
For example [0 0 1 1 0 0 1]
->  [0 1 0 1 2 3 2]
4) Combine the results of steps 2 & 3 to determine the final
output location for each element and move it there

LSB Radix sort is an out-of-place sort and you will need to ping-pong values
between the input and output buffers we have provided.  Make sure the final
sorted results end up in the output buffer!  Hint: You may need to do a copy
at the end.

 */

const unsigned int bitdepth = 8*sizeof(unsigned int);
const unsigned int numBits = 1;
const unsigned int numBins = 1 << numBits;
/*
   __global__ void histo_offset (unsigned int* d_inputVals,
   unsigned int* d_binHistogram,
   unsigned int* d_offsetvec,
   const size_t numElems, unsigned int i)
   {
   const int2 myID = make_int2(threadIdx.x + blockDim.x * blockIdx.x,
   threadIdx.y + blockDim.y * blockIdx.y);
   const int myID1D = myID.y*gridDim.x*blockDim.x + myID.x;

   if (myID1D >= numElems)
   return;

   unsigned int currVal = d_inputVals[myID1D];

   unsigned int mask = (numBins - 1) << i;
   unsigned int bin = (currVal & mask) >> i;
   d_offsetvec[myID1D] = atomicAdd(& d_binHistogram[bin], 1);
   }
 */

__global__ void compact (unsigned int* d_inputVals,
		unsigned int* d_compact_out,
		const size_t numElems, unsigned int i)
{

	const int2 myID = make_int2(threadIdx.x + blockDim.x * blockIdx.x,
			threadIdx.y + blockDim.y * blockIdx.y);
	const int myID1D = myID.y*gridDim.x*blockDim.x + myID.x;

	if (myID1D >= numElems){
		d_compact_out[myID1D] = 0;
	}
	else{
		unsigned int mask = (numBins - 1) << i;
		unsigned int bin = (d_inputVals[myID1D] & mask) >> i;
		d_compact_out[myID1D] = !bin;
	}
}

__global__ void blelloch_scan (unsigned int *d_bins_io,
		const size_t numBins)
{
	const int tid = threadIdx.x + threadIdx.y * blockDim.x;
	const int myID1D = (blockIdx.x + blockIdx.y*gridDim.x)*blockDim.x*blockDim.y + tid;
	const int thnum = blockDim.x*blockDim.y;

	//printf("overall ID is %d, at tid %d, difference is %d\n", myID1D, tid, myID1D-tid);
	for (unsigned int i = 2; i<=numBins; i<<=1){
		if ((tid+1)%i == 0){
			unsigned int step = i>>1;
			d_bins_io[myID1D] += d_bins_io[myID1D-step];
		}
		__syncthreads();
	}

	if (tid == thnum-1) d_bins_io[myID1D] = 0;
	__syncthreads();

	for (unsigned int j = numBins; j>0; j>>=1){
		if ((tid+1)%j == 0){
			unsigned int step2 = j>>1;
			unsigned int right = d_bins_io[myID1D];
			d_bins_io[myID1D] += d_bins_io[myID1D-step2];
			d_bins_io[myID1D-step2] = right;
		}
		__syncthreads();
	}

}

__global__ void blelloch_patch (unsigned int* d_bins_io, unsigned int* d_inputVals,
		const size_t num_scanPatch, const size_t numElems)
{
	const int tid = threadIdx.x + threadIdx.y * blockDim.x;
	const int myID1D = (blockIdx.x + blockIdx.y*gridDim.x)*blockDim.x*blockDim.y + tid;
	const int idx = (myID1D+1)*num_scanPatch;

	if (idx >= numElems)
		return;

	d_bins_io[idx] = d_bins_io[idx-1] + d_inputVals[idx-1];
}

__global__ void hillis_postprocess (unsigned int *d_bins_io, const size_t numscanPatch,
		const size_t numBins, const size_t numElems)
{
	const int tid = threadIdx.x + threadIdx.y * blockDim.x;
	const int myID1D = (blockIdx.x + blockIdx.y*gridDim.x)*blockDim.x*blockDim.y + tid;

	if (myID1D*numscanPatch >= numElems)
		return;

	for (unsigned int i = 1; i<=numBins; i<<=1){
		unsigned int right = 0;
		if ((tid+1)>i){
			right = d_bins_io[myID1D*numscanPatch] + d_bins_io[(myID1D-i)*numscanPatch];
		}
		__syncthreads();
		if ((tid+1)>i){
			d_bins_io[myID1D*numscanPatch] = right;
		}
		__syncthreads();
	}

}

__global__ void global_correct (unsigned int *d_bins_io, const size_t numscanPatch)
{
	const int tid = threadIdx.x + threadIdx.y * blockDim.x;
	const int blockid = blockIdx.x + blockIdx.y*gridDim.x;
	const int myID1D = blockid*blockDim.x*blockDim.y + tid;
	const int thnum = blockDim.x*blockDim.y;

	if (tid >= numscanPatch || tid == 0)
		return;
	d_bins_io[myID1D] += d_bins_io[blockid*numscanPatch];

}

__global__ void swapLocs (unsigned int* d_inputVals, unsigned int* d_inputPos,
		unsigned int* d_outputVals, unsigned int* d_outputPos, unsigned int* d_eqnil,
		unsigned int* d_offsetvec, const size_t numElems, unsigned int i)
{
	const int2 myID = make_int2(threadIdx.x + blockDim.x * blockIdx.x,
			threadIdx.y + blockDim.y * blockIdx.y);
	const int myID1D = myID.y*gridDim.x*blockDim.x + myID.x;

	if (myID1D >= numElems)
		return;
	unsigned int totFalse = d_offsetvec[numElems];

	unsigned int currVal = d_inputVals[myID1D];
	unsigned int currPos = d_inputPos[myID1D];
	unsigned int newidx = 0;

	if (d_eqnil[myID1D]){
		newidx = d_offsetvec[myID1D];
	}else{
		newidx = myID1D - d_offsetvec[myID1D] + totFalse;
	}

	d_outputVals[newidx] = currVal;
	d_outputPos[newidx] = currPos;

}

__global__ void old_prototype (unsigned int* d_inputVals, unsigned int* const d_inputPos,
		unsigned int* d_outputVals, unsigned int* d_outputPos,
		unsigned int* d_binHistogram,
		unsigned int* d_offsetvec,
		unsigned int* d_binScan,
		const size_t numElems)
{
	const int2 myID = make_int2(threadIdx.x + blockDim.x * blockIdx.x,
			threadIdx.y + blockDim.y * blockIdx.y);
	const int myID1D = myID.y*gridDim.x*blockDim.x + myID.x;

	if (myID1D >= numElems)
		return;

	unsigned int currVal = d_inputVals[myID1D];
	unsigned int currPos = d_inputPos[myID1D];

	for (unsigned int i=0;i<bitdepth;i+=numBits){
		unsigned int mask = (numBins - 1) << i;
		unsigned int bin = (currVal & mask) >> i;
		d_offsetvec[myID1D] = atomicAdd(& d_binHistogram[bin], 1);
		__syncthreads();
		if (myID1D == 0){
			d_binScan[0] = 0;
			for (unsigned int j=1;j<numBins;j++){
				d_binScan[j] = d_binScan[j-1] + d_binHistogram[j-1];
				printf("d_bins at %d is %d\n", j, d_binScan[j]);
				d_binHistogram[j-1] = 0;
			}
			d_binHistogram[numBins-1] = 0;
		}
		__syncthreads();
		unsigned int newidx = d_binScan[bin] + d_offsetvec[myID1D];
		//if (newidx>=numElems)
		//printf("newidx overflowed: %d\n", newidx);
		//d_outputVals[newidx] = currVal;
		//d_outputPos[newidx] = currPos;

		__syncthreads();
		currVal = d_outputVals[myID1D];
		currPos = d_outputPos[myID1D];
	}
}

void prefix_sum_scan (unsigned int* d_io_offset, unsigned int numthreads,
		const size_t numElems, const int thread_x, const int thread_y, const int grids)
{
	unsigned int *d_init;
	checkCudaErrors(cudaMalloc(&d_init, numElems*sizeof(unsigned int)));
	checkCudaErrors(cudaMemcpy(d_init, d_io_offset, numElems*sizeof(unsigned int), cudaMemcpyDeviceToDevice));

	const dim3 blockSize(thread_x, thread_y, 1);
	const dim3 gridSize(grids, 1, 1);

	blelloch_scan<<<gridSize, blockSize>>>(d_io_offset, numthreads);

	blelloch_patch<<<1, gridSize>>>(d_io_offset, d_init, numthreads, numElems);

	hillis_postprocess<<<1, gridSize>>>(d_io_offset, numthreads, grids, numElems);

	global_correct<<<gridSize, blockSize>>>(d_io_offset, numthreads);

}


void your_sort(unsigned int* const d_inputVals,
		unsigned int* const d_inputPos,
		unsigned int* const d_outputVals,
		unsigned int* const d_outputPos,
		const size_t numElems)
{
	//TODO
	//PUT YOUR SORT HERE
/*
	unsigned int numtest = 255;
	unsigned int *h_testvec = new unsigned int[numtest];
	for (unsigned int u=0;u<numtest;u++){
		h_testvec[u] = u;
	}


	const int thread_x = 32;
	const int thread_y = 32;
	unsigned int numthreads = thread_x*thread_y;
	const int grids = (int)ceil((float)numtest/(float)numthreads);
	printf("grids is %d\n", grids);
	const dim3 blockSize(thread_x, thread_y, 1);
	const dim3 gridSize(grids, 1, 1);

	const unsigned int newsize = grids*numthreads;

	unsigned int *h_resvec = new unsigned int[newsize];

	unsigned int *d_offset, *d_swapBufV, *d_swapBufP;
	printf("numBins is %d\n", numBins);
	printf("numElems is %d\n", (int) numElems);
	checkCudaErrors(cudaMalloc(&d_offset, newsize*sizeof(unsigned int)));
	checkCudaErrors(cudaMalloc(&d_swapBufV, numtest*sizeof(unsigned int)));
	checkCudaErrors(cudaMalloc(&d_swapBufP, numtest*sizeof(unsigned int)));

	checkCudaErrors(cudaMemcpy(d_outputVals, h_testvec, numtest*sizeof(unsigned int), cudaMemcpyHostToDevice));
	checkCudaErrors(cudaMemcpy(d_outputPos, h_testvec, numtest*sizeof(unsigned int), cudaMemcpyHostToDevice));

	compact<<<gridSize, blockSize>>>(d_outputVals, d_offset, numtest, 0);
	prefix_sum_scan(d_offset, numthreads, newsize, thread_x, thread_y, grids);

	checkCudaErrors(cudaMemcpy(h_resvec, d_offset, newsize*sizeof(unsigned int), cudaMemcpyDeviceToHost));

	for (int j=0;j<newsize;j++){
		if(j<numtest)
			std::cout << "output is " << std::bitset<16>(h_testvec[j]);
		else
			std::cout << "output is none";

		printf(" at %d, offset is %d\n", j, h_resvec[j]);
	}
*/

	const int thread_x = 32;
	const int thread_y = 32;
	unsigned int numthreads = thread_x*thread_y;
	const int grids = (int)ceil((float)numElems/(float)numthreads);
	printf("grids is %d\n", grids);
	const dim3 blockSize(thread_x, thread_y, 1);
	const dim3 gridSize(grids, 1, 1);

	const unsigned int newsize = grids*numthreads;

	unsigned int *d_eqnil, *d_offset, *d_swapBufV, *d_swapBufP;
	printf("numBins is %d\n", numBins);
	printf("numElems is %d\n", (int) numElems);
	checkCudaErrors(cudaMalloc(&d_offset, newsize*sizeof(unsigned int)));
	checkCudaErrors(cudaMalloc(&d_eqnil, newsize*sizeof(unsigned int)));
	checkCudaErrors(cudaMalloc(&d_swapBufV, numElems*sizeof(unsigned int)));
	checkCudaErrors(cudaMalloc(&d_swapBufP, numElems*sizeof(unsigned int)));

	checkCudaErrors(cudaMemcpy(d_outputVals, d_inputVals, numElems*sizeof(unsigned int), cudaMemcpyDeviceToDevice));
	checkCudaErrors(cudaMemcpy(d_outputPos, d_inputPos, numElems*sizeof(unsigned int), cudaMemcpyDeviceToDevice));

	for (unsigned int i=0;i<bitdepth;i+=numBits)
	{
		compact<<<gridSize, blockSize>>>(d_outputVals, d_eqnil, numElems, i);
		checkCudaErrors(cudaMemcpy(d_offset, d_eqnil, newsize*sizeof(unsigned int), cudaMemcpyDeviceToDevice));

		prefix_sum_scan(d_offset, numthreads, newsize, thread_x, thread_y, grids);

		swapLocs<<<gridSize, blockSize>>>(d_outputVals, d_outputPos, d_swapBufV, d_swapBufP, d_eqnil, d_offset, numElems, i);
		checkCudaErrors(cudaGetLastError());

		checkCudaErrors(cudaMemcpy(d_outputVals, d_swapBufV, numElems*sizeof(unsigned int), cudaMemcpyDeviceToDevice));
		checkCudaErrors(cudaMemcpy(d_outputPos, d_swapBufP, numElems*sizeof(unsigned int), cudaMemcpyDeviceToDevice));

		cudaDeviceSynchronize();
		checkCudaErrors(cudaGetLastError());
		/*
		unsigned int *h_binScan = new unsigned int[numBins];
		checkCudaErrors(cudaMemcpy(h_binScan, d_binHisto, numBins*sizeof(unsigned int), cudaMemcpyDeviceToHost));
		unsigned int sumBins = 0;
		for (int j=0;j<numBins;j++){
			sumBins+=h_binScan[j];
		}
		printf("sumBins = %d", sumBins);
		checkCudaErrors(cudaMemcpy(h_testvec, d_outputVals, numtest*sizeof(unsigned int), cudaMemcpyDeviceToHost));
		for (int j=0;j<numtest;j++){
			std::cout << "output is " << std::bitset<16>(h_testvec[j]);
			printf(" at %d, stage = %d\n", j, i);
		}*/

	}

	/*
	   unsigned int numtest = 3596;
	   unsigned int *h_testvec = new unsigned int[numtest];
	   unsigned int *h_resvec = new unsigned int[numtest];
	   for (unsigned int u=0;u<numtest;u++){
	   h_testvec[u] = 1;
	   }

	   const int thread_x = 32;
	   const int thread_y = 32;
	   int numthreads = thread_x*thread_y;
	   const int grids = (int)ceil((float)numtest/(float)numthreads);
	   printf("grids is %d\n", grids);
	   const dim3 blockSize(thread_x, thread_y, 1);
	   const dim3 gridSize(grids, grids, 1);

	   const unsigned int newsize = grids*numthreads;

	   unsigned int *d_init;
	   checkCudaErrors(cudaMalloc(&d_init, newsize*sizeof(unsigned int)));
	   checkCudaErrors(cudaMemcpy(d_outputVals, h_testvec, newsize*sizeof(unsigned int), cudaMemcpyHostToDevice));
	   checkCudaErrors(cudaMemcpy(d_init, h_testvec, newsize*sizeof(unsigned int), cudaMemcpyHostToDevice));

	   prefix_sum_scan(d_outputVals, numthreads, newsize, thread_x, thread_y, grids);

	   checkCudaErrors(cudaMemcpy(h_resvec, d_outputVals, numtest*sizeof(unsigned int), cudaMemcpyDeviceToHost));

	   for (int j=0;j<numtest;j++){
	   printf("sorted h at %d is  %d, original is %d\n", j, h_resvec[j], h_testvec[j]);
	   }
	 */
}
